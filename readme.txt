Task - Design Patterns 2:

Students:
    1. Tal Sahar - 206955452
    2. Asaf Galili - 315785006

Program operating instructions:
    1. Compile the program using 'make all' command.
    2. Run the st_pipeline program using one of the following commands:
            a. st_pipeline <N> <seed>
            b. st_pipeline <N>
    on option 'a' N random integers will be generated by the provided seed.
    on option 'b' N random integers will be generated by a randomly generated seed.

    3. The program will run.


Program flow:
    1. When executing the st_pipeline, the arguments provided are being converted into integers, and passed into an
        instance of a st_pipeline class.
    2. The st_pipeline class ctor creates 4 instances of Active objects class, and wiring them to each other so that
        each Active object will hold a pointer to the next one. In addition, each Active object instance is getting
        as an argument a function - the work he needs to do on each element in his queue.
    3. Each Active object holds a thread-safe Queue class, and a thread that run in an infinity while loop, the thread
        is blocked on the dequeue method of its queue, nothing will happen until a new element is being inserted into
        the active object`s queue.
    4. The st_pipeline instance then creates the first task and enqueue it into the first active object instance.
        The task is to create N numbers with the seed provided and enqueue them one by one into the next active object`s
        queue.
    5. At this stage, the pipeline is running and the next 3 active objects will handle each task they will receive,
        N tasks in total for each active object (excluding the first active object).
    6. After each task is handled and each active object handled N tasks, the program will hold for new tasks as the
        st_pipeline instance will hold for each thread to finish its job. (In case of need of the program to be shutdown
        the stop method of each active object instance is needed to be called. otherwise, ctrl+c will end the program.

Testing examples:
    1.
        command:
            "./st_pipeline 1"

        output:
            217553
            False
            217564
            False
            217551
            217553

    2.
        command:
            "./st_pipeline 1"

        output:
            350191
            True
            350202
            False
            350189
            350191

    3.
        command:
            "./st_pipeline 1 1"

        output:
            220488
            False
            220499
            False
            220486
            220488



